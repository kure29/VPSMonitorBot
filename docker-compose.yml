version: '3.8'

services:
  vps-monitor:
    build: .
    container_name: vps-monitor-bot
    restart: unless-stopped
    
    # 环境变量
    environment:
      - TZ=Asia/Shanghai
      - PYTHONUNBUFFERED=1
    
    # 数据卷挂载
    volumes:
      - ./config.json:/app/config.json:ro
      - ./data:/app/data
      - ./logs:/app/logs
    
    # 网络设置
    networks:
      - vps-monitor-network
    
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    # 健康检查
    healthcheck:
      test: ["CMD-SHELL", "python3 -c 'import psutil; [p for p in psutil.process_iter() if \"monitor.py\" in p.cmdline()]' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    
    # 依赖服务
    depends_on:
      - redis
    
    # 标签
    labels:
      - "com.example.service=vps-monitor"
      - "com.example.version=2.1.0"

  # Redis缓存服务（可选）
  redis:
    image: redis:7-alpine
    container_name: vps-monitor-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-vpsmonitor}
    
    volumes:
      - redis-data:/data
    
    networks:
      - vps-monitor-network
    
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'

  # Nginx反向代理（可选，用于Web管理界面）
  nginx:
    image: nginx:alpine
    container_name: vps-monitor-nginx
    restart: unless-stopped
    
    ports:
      - "8080:80"
    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./web:/usr/share/nginx/html:ro
    
    networks:
      - vps-monitor-network
    
    depends_on:
      - vps-monitor

# 网络配置
networks:
  vps-monitor-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./redis-data

# 环境变量文件示例
# 创建 .env 文件并设置以下变量：
# REDIS_PASSWORD=your_redis_password
# TZ=Asia/Shanghai
